#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT(attic, 1.0, johnw@newartisans.com)
AM_INIT_AUTOMAKE(attic, 1.0)
AC_CONFIG_SRCDIR([attic.cc])
AC_CONFIG_HEADER([acconf.h])

# Checks for programs.
AC_PROG_CXX
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL
AM_PROG_LIBTOOL

# Checks for emacs lisp path
AM_PATH_LISPDIR

# check for the boost libraries
AC_CACHE_CHECK(
  [if boost is available],
  [boost_cpplib_avail],
  [boost_save_libs=$LIBS
   LIBS="-lboost_thread -lboost_regex $LIBS"
   AC_LANG_PUSH(C++)
   AC_TRY_LINK(
	 [#include <boost/thread/thread.hpp>
	  #include <boost/regex.hpp>
	  #include <iostream>
	  void hello() {
	    boost::regex re("Hello, world!");
	    std::cout << boost::regex_match("Hello, world!", re) << std::endl;
	  }],
	 [boost::thread thrd(&hello);
	  thrd.join();
	  return 0],
	 [boost_cpplib_avail=true],
	 [boost_cpplib_avail=false])
   AC_LANG_POP
   LIBS=$boost_save_libs])
if [test x$boost_cpplib_avail = xtrue ]; then
  AM_CONDITIONAL(HAVE_BOOST, true)
  LIBS="-lboost_thread -lboost_regex $LIBS"
else
  AC_MSG_FAILURE("Could not find the boost libraries (set CPPFLAGS and LDFLAGS?)")
fi

# Check for options
AC_ARG_ENABLE(debug,
  [  --enable-debug          Turn on debugging],
  [case "${enableval}" in
    yes) debug=true ;;
    no)  debug=false ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
  esac],[debug=false])
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

# Checks for header files.
AC_STDC_HEADERS
AC_HAVE_HEADERS(sys/stat.h)

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_TYPE_SIZE_T
AC_STRUCT_TM

# Checks for library functions.
#AC_FUNC_ERROR_AT_LINE
AC_HEADER_STDC
AC_CHECK_FUNCS([access mktime realpath strftime strptime getpwuid getpwnam])

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
